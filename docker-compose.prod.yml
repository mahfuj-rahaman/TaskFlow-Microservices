# Production environment override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
version: '3.8'

services:
  postgres:
    # Do not expose ports in production - services communicate through internal network
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER is required}
      POSTGRES_DB: ${POSTGRES_DB:-taskflow}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  redis:
    # Do not expose ports in production
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  rabbitmq:
    # Only expose management UI if needed (remove in strict production)
    ports:
      - "127.0.0.1:15672:15672"  # Bind to localhost only
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:?RABBITMQ_USER is required}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:?RABBITMQ_PASSWORD is required}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  task-service:
    build:
      context: .
      dockerfile: src/Services/Task/Dockerfile
      target: final
    ports:
      - "80:8080"
      - "443:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__TaskDb=Host=postgres;Port=5432;Database=taskflow_task;Username=${POSTGRES_USER:?POSTGRES_USER is required};Password=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      - DatabaseProvider=PostgreSQL
      - Redis__ConnectionString=redis:6379,password=${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=${RABBITMQ_USER:?RABBITMQ_USER is required}
      - RabbitMQ__Password=${RABBITMQ_PASSWORD:?RABBITMQ_PASSWORD is required}
      - EnableSensitiveDataLogging=false
      - Serilog__MinimumLevel__Default=Warning
    volumes:
      - task_logs:/app/logs
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  task_logs:
    name: taskflow-task-logs-prod
